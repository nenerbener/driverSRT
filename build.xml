<?xml version="1.0"?>

<project name="driverSRT" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Load all the default properties, and any the user wants    -->
  <!-- to contribute (without having to type -D or edit this file -->
  <property file="./default.properties" />

  <!-- the buildpath -->
  <path id="buildpath">
    <fileset dir="${build.lib}">
      <include name="*.jar" />
    </fileset>
    <pathelement location="${build.conf}"/>
<!--    <pathelement location="${build.resources}"/> -->
  </path>

  <!-- the normal classpath -->
  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <fileset dir="${build.lib}">
      <include name="*.jar" />
    </fileset>
<!--    <pathelement location="${build.resources}"/> -->
  </path>

  <!-- the Junit test buildpath -->
  <path id="testbuildpath">
    <fileset dir="${build.lib}">
      <include name="*.jar" />
    </fileset>
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.conf}"/>
<!--    <pathelement location="${build.resources}"/> -->
  </path>

  <!-- the test classpath -->
  <path id="testpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test.classes}"/>
    <fileset dir="${build.lib}">
      <include name="*.jar" />
    </fileset>
<!--    <pathelement location="${build.resources}"/> -->
  </path>

  <presetdef name="javac">
    <javac includeantruntime="false" />
  </presetdef>

  <!-- target: clean-build -->
  <target name="0-clean" description="--> clean the project built files">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ================================================================== -->
  <!-- target: resolve all dependencies                                   -->
  <!-- ================================================================== -->
  <target name="0-resolve" description="--> resolve and retrieve dependencies with ivy">
<!--    <ivy:resolve file="${ivy.file}" conf="default" log="download-only"/> 
    <ivy:retrieve pattern="${build.lib.dir}/[artifact]-[revision].[ext]" symlink="false" log="quiet"/>i -->
	<ivy:resolve file="${ivy.file}" conf="default"/> 
	<ivy:retrieve/> 
  </target>

	<target name="1-init" depends="0-clean, 0-resolve" description="--> create build directory, download dependencies and copy">
		<mkdir dir="${build.dir}"/>
		<copy file="${base.dir}/default.properties" 
			todir="${build.dir}"
			verbose="true"/>
		<copy file="${base.dir}/build.xml" 
			todir="${build.dir}"
			verbose="true"/>
		<copy file="${base.dir}/ivy.xml" 
			todir="${build.dir}"
			verbose="true"/>
		<copy todir="${build.lib}" verbose="true">
			<fileset dir="${lib.dir}" includes="*.*"/>
		</copy>
<!--
		<mkdir dir="${build.resources}"/>
		<copy todir="${build.resources}" verbose="true">
			<fileset dir="${resources.dir}" includes="*.*"/>
		</copy>
-->
		<mkdir dir="${build.classes}"/>
		<copy file="${base.dir}/log4j.properties" 
			todir="${build.classes}"
			verbose="true"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${build.test.classes}"/>
	</target>

  <!-- ====================================================== -->
	<!-- Compile the Java files to build/classes folder       -->
  <!-- ====================================================== -->
  <target name="2a-compile" depends="1-init" description="--> compile Java files without Junit test">
    <javac
     encoding="${build.encoding}"
     srcdir="${src.dir}"
		 includes="com/nenerbener/**/*.java"
     destdir="${build.classes}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     target="${javac.version}"
     source="${javac.version}"
     deprecation="${javac.deprecation}">
		 <compilerarg value="-Xlint:-path"/>
		 <classpath refid="buildpath"/>
    </javac>
  </target>

  <!-- ====================================================== -->
	<!-- Compile the Java files to build/testclasses folder       -->
  <!-- ====================================================== -->
  <target name="2b-compile" depends="2a-compile" description="--> compile Java files with Junit test">
    <javac
     encoding="${build.encoding}"
     srcdir="${test.dir}"
		 includes="com/nenerbener/**/*.java"
     destdir="${build.test.classes}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     target="${javac.version}"
     source="${javac.version}"
     deprecation="${javac.deprecation}">
		 <compilerarg value="-Xlint:-path"/>
		 <classpath refid="testbuildpath"/>
    </javac>
  </target>

  <!-- ================================================================== -->
	<!-- run a default example using String[] args defined									-->
	<!-- in default.properties	    																				-->
  <!-- ================================================================== -->
	<target name="3a-run" depends="2a-compile" description="--> run driverSRT.DriverSRT.class">
		<java classname="com.nenerbener.driverSRT.DriverSRT">
			<jvmarg value="-Dlog4j.debug=true"/>
			<arg value="${run.dir}"/>
			<arg value="${run.url}"/> 
			<classpath refid="classpath"/>
		</java>
	</target>

  <!-- ================================================================== -->
	<!-- debug a default example using String[] args defined							  -->
	<!-- in default.properties. Remember to use a debug client on port 5555	-->
  <!-- ================================================================== -->
	<target name="3b-debug" depends="2a-compile" description="--> run driverSRT.DriverSRT.class">
		<java classname="com.nenerbener.driverSRT.DriverSRT" fork="yes" failonerror="false" maxmemory="2048m">
			<classpath refid="classpath"/>
			<jvmarg value="-Dlog4j.debug=true"/>
			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xnoagent"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=5555,server=y,suspend=y"/>
			<arg value="${run.dir}"/>
			<arg value="${run.url}"/> 
		</java>
	</target>
	
  <!-- ================================================================== -->
	<!-- junit test																										  	  -->
  <!-- ================================================================== -->
  <target name="4-test" depends="2b-compile" description="--> junit testing"> 
	<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
	  <classpath refid="testpath"/>
      <test name="com.nenerbener.driverSRT.DriverSRTTest" haltonfailure="no" outfile="testOut.log">
		  <formatter type="xml"/>
		  </test>
    </junit>
  </target>

  <!-- ================================================================== -->
	<!-- debug junit test																										-->
	<!-- Remember to use a debug client on port 5432												-->
  <!-- ================================================================== -->
  <target name="5-testdebug" depends="2b-compile" description="--> junit testing"> 
	<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
		<jvmarg value="-Xdebug"/>
		<jvmarg value="-Xnoagent"/>
		<jvmarg value="-Xrunjdwp:transport=dt_socket,address=5432,server=y,suspend=y"/>
	  <classpath refid="testpath"/>
      <test name="com.nenerbener.driverSRT.DriverSRTTest" haltonfailure="no" outfile="testOut.log">
		  <formatter type="xml"/>
		  </test>
    </junit>
  </target>

  <!-- ================================================================== -->
  <!-- Make jar file with included dependencies. Mainly for standalone    -->
  <!-- applications. NO class files included. Run this target to create.  -->
  <!-- You can use ./driverSRT.sh urls/urls.txt for example run           -->
  <!-- ================================================================== -->
  <target name="6a-jar-with-dependencies" depends="2b-compile" description="--> make driverSRT.jar with dependencies">
		<jar destfile = "${build.dir}/${final.name}.withdependencies.jar">
			<fileset dir = "${base.dir}"
				excludes = "${build.dir}/**/*.class ${build.dir}/** ${run.dir}/** testOut.log.xml"/>
			<manifest>
				<attribute name = "Main-Class" value = "com.nenerbener.driverSRT"/>
			</manifest>
    </jar>
  </target>

  <!-- ================================================================== -->
  <!-- Make jar file without included dependencies. Mainly for library    -->
  <!-- use where many of the depenencies are included in the parent app.  -->
  <!-- Class files included in jar.                                       -->
  <!-- A dependency jar is included that includes dependency jars         -->
  <!-- ================================================================== -->
  <target name="6b-jar-without-dependencies-and-separate-dependency-jar" depends="2b-compile" description="--> make driverSRT.jar without dependencies and separate dependency jar">
		<jar destfile = "${build.dir}/${final.name}.without.dependencies.jar">
			<fileset dir = "${build.classes}"
				excludes = "${lib.dir}/** ${build.lib}/** ${run.dir}/** testOut.log.xml log4j.properties ${build.classes}/log4j.properties"/>
			<manifest>
				<attribute name = "Main-Class" value = "com.nenerbener.driverSRT"/>
			</manifest>
    </jar>
	<jar destfile = "${build.dir}/${final.name}.dependencies.jar">
		<fileset dir = "${lib.dir}"/>
		<manifest>
			<attribute name = "Main-Class" value = "com.nenerbener.driverSRT"/>
		</manifest>
    </jar>
  </target>

</project>
